<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.zanata</groupId>
        <artifactId>server</artifactId>
        <version>2.2-SNAPSHOT</version>
    </parent>
    <artifactId>functional-test</artifactId>
    <!--if we want to use pom packaging, we need to explicitly enable some plugins and various things-->
    <!--<packaging>pom</packaging>-->
    <name>functional-test</name>

    <properties>
        <selenium.version>2.26.0</selenium.version>

        <!--Cargo Settings -->
        <cargo.wait>false</cargo.wait>
        <cargo.host>localhost</cargo.host>
        <cargo.container>jboss51x</cargo.container>
        <cargo.servlet.port>9898</cargo.servlet.port>
        <cargo.installation>http://aarnet.dl.sourceforge.net/project/jboss/JBoss/JBoss-5.1.0.GA/jboss-5.1.0.GA-jdk6.zip</cargo.installation>
        <cargo.home>${java.io.tmpdir}/cargo/installs/jboss-ewp-5.1.2/jboss-ewp-5.1/jboss-as-web</cargo.home>
        <context.path>zanata</context.path>

        <!--data source-->
        <jdbc.groupId>com.h2database</jdbc.groupId>
        <jdbc.artifactId>h2</jdbc.artifactId>
        <jdbc.version>1.2.144</jdbc.version>

        <ds.jndi.name>zanataDatasource</ds.jndi.name>
        <!--<ds.hibernate.dialect>org.hibernate.dialect.H2Dialect</ds.hibernate.dialect>-->
        <!-- use profile -Pusemysql to switch to mysql database -->
        <ds.driver.class>org.h2.Driver</ds.driver.class>
        <ds.connection.url>jdbc:h2:file:${project.build.directory}/h2/zanata;AUTO_SERVER=TRUE</ds.connection.url>
        <ds.username>sa</ds.username>
        <ds.password />

        <!--target zanata instance-->
        <zanata.target.version>${project.parent.version}</zanata.target.version>
        <zanata.target.war>${basedir}/../zanata-war/target/zanata-${zanata.target.version}.war</zanata.target.war>
        <zanata.instance.url>http://${cargo.host}:${cargo.servlet.port}/${context.path}</zanata.instance.url>
        <zanata.apikey>b6d7044e9ee3b2447c28fb7c50d86d98</zanata.apikey>
        <zanata.sample.projects.basedir>${project.build.testOutputDirectory}/sample-projects</zanata.sample.projects.basedir>

        <webdriver.log.file>${project.build.directory}/browser_console.log</webdriver.log.file>

        <!-- controls concordion output location-->
        <concordion.output.dir>${project.build.directory}/concordion</concordion.output.dir>
        <!-- on jenkins, this needs to be set to empty - so that cargo can shutdown. see http://stackoverflow.com/questions/1096642/tomcat-failed-to-shutdown -->
        <cargo.debug.jvm.args> -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8787 -Xnoagent -Djava.compiler=NONE</cargo.debug.jvm.args>
        <!-- this property can be used to control what test needs to be run by failsafe -->
        <include.test.patterns>**/*TestSuite.java</include.test.patterns>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.hamcrest</groupId>
                    <artifactId>hamcrest-all</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>junit</groupId>
                    <artifactId>junit</artifactId>
                </exclusion>
                <exclusion>
                				<artifactId>xml-apis</artifactId>
                				<groupId>xml-apis</groupId>
                </exclusion>
                <exclusion>
                				<artifactId>xercesImpl</artifactId>
                				<groupId>xerces</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>

        <dependency>
            <groupId>org.concordion</groupId>
            <artifactId>concordion</artifactId>
            <version>1.4.2</version>
            <exclusions>
            	<exclusion>
            		<artifactId>
            			junit-dep
            		</artifactId>
            		<groupId>junit</groupId>
            	</exclusion>
            	<exclusion>
            					<artifactId>xml-apis</artifactId>
            					<groupId>xml-apis</groupId>
            	</exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.concordion</groupId>
            <artifactId>concordion-extensions</artifactId>
            <version>1.1.0</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
        </dependency>

        <!--cargo needs these-->
        <!--<dependency>-->
            <!--<groupId>${project.groupId}</groupId>-->
            <!--<artifactId>zanata-war</artifactId>-->
            <!--<version>${zanata.target.version}</version>-->
            <!--<type>war</type>-->
        <!--</dependency>-->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
        </dependency>
        <dependency>
            <groupId>${jdbc.groupId}</groupId>
            <artifactId>${jdbc.artifactId}</artifactId>
            <version>${jdbc.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>usemysql</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <properties>
                <jdbc.groupId>mysql</jdbc.groupId>
                <jdbc.artifactId>mysql-connector-java</jdbc.artifactId>
                <jdbc.version>5.1.9</jdbc.version>
                <ds.driver.class>com.mysql.jdbc.Driver</ds.driver.class>
                <ds.connection.url>jdbc:mysql://localhost:3306/zanata_functional?characterEncoding=UTF-8</ds.connection.url>
                <ds.username>root</ds.username>
                <ds.password />
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>1.2.1</version>
                        <executions>
                            <execution>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>mysql</executable>
                            <workingDirectory>${project.build.testOutputDirectory}</workingDirectory>
                            <commandlineArgs>-u root -e "source create_database.sql"</commandlineArgs>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>run-functional-test</id>
            <activation>
                <file>
                    <exists>${zanata.target.war}</exists>
                </file>
                <property>
                    <name>functional-test</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.cargo</groupId>
                        <artifactId>cargo-maven2-plugin</artifactId>
                        <version>1.1.0</version>
                        <configuration>
                            <wait>${cargo.wait}</wait>
                            <container>
                                <containerId>${cargo.container}</containerId>

                                <!--if install from url-->
                                <zipUrlInstaller>
                                    <url>${cargo.installation}</url>
                                    <downloadDir>${user.home}/Downloads</downloadDir>
                                    <extractDir>${project.build.directory}/cargo/installs</extractDir>
                                </zipUrlInstaller>

                                <!--<home>${jboss.home}</home>-->
                                <timeout>300000</timeout>

                                <dependencies>
                                    <dependency>
                                        <groupId>${jdbc.groupId}</groupId>
                                        <artifactId>${jdbc.artifactId}</artifactId>
                                    </dependency>
                                    <dependency>
                                        <groupId>javax.servlet</groupId>
                                        <artifactId>servlet-api</artifactId>
                                    </dependency>

                                </dependencies>
                                <output>${project.build.directory}/container.log</output>
                                <append>false</append>
                                <log>${project.build.directory}/cargo.log</log>
                                <systemProperties>
                                    <ehcache.disk.store.dir>${project.build.directory}/ehcache</ehcache.disk.store.dir>
                                    <jboss.server.log.threshold>INFO</jboss.server.log.threshold>
                                    <hibernate.search.default.indexBase>${project.build.directory}/zanataindex</hibernate.search.default.indexBase>
                                </systemProperties>
                            </container>
                            <configuration>
                                <!--<type>existing</type>-->
                                <type>standalone</type>
                                <home>${cargo.home}/server/default</home>
                                <configfiles>
                                    <configfile>
                                        <file>${project.basedir}/src/test/resources/conf/zanata.properties</file>
                                        <todir>conf</todir>
                                    </configfile>
                                    <configfile>
                                        <file>${project.basedir}/src/test/resources/conf/login-config.xml</file>
                                        <todir>conf</todir>
                                    </configfile>
                                </configfiles>
                                <deployables>
                                    <deployable>
                                        <type>file</type>
                                        <location>${project.build.testOutputDirectory}/datasource/zanata-ds.xml</location>
                                    </deployable>
                                    <deployable>
                                        <!--<groupId>${project.groupId}</groupId>-->
                                        <!--<artifactId>zanata-war</artifactId>-->
                                        <type>war</type>
                                        <location>${zanata.target.war}</location>
                                        <pingURL>http://${cargo.host}:${cargo.servlet.port}/${context.path}/</pingURL>
                                        <properties>
                                            <context>${context.path}</context>
                                        </properties>
                                    </deployable>

                                </deployables>
                                <properties>
                                    <cargo.jboss.configuration>default</cargo.jboss.configuration>
                                    <cargo.hostname>${cargo.host}</cargo.hostname>
                                    <cargo.servlet.port>9898</cargo.servlet.port>

                                    <cargo.jvmargs>
                                        <!-- NB: JDom parser doesn't like comments starting with '-' -->
                                        -XX:PermSize=512m -XX:MaxPermSize=1024 -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled ${cargo.debug.jvm.args}
                                    </cargo.jvmargs>
                                </properties>
                            </configuration>
                        </configuration>
                        <executions>
                            <execution>
                                <id>cargo-start</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>cargo-stop</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>sql-maven-plugin</artifactId>
                        <version>1.5</version>

                        <dependencies>
                            <!-- specify the dependent JDBC driver here -->
                            <dependency>
                                <groupId>${jdbc.groupId}</groupId>
                                <artifactId>${jdbc.artifactId}</artifactId>
                                <version>${jdbc.version}</version>
                            </dependency>
                        </dependencies>

                        <!-- common configuration shared by all executions -->
                        <configuration>
                            <driver>${ds.driver.class}</driver>
                            <url>${ds.connection.url}</url>
                            <username>${ds.username}</username>
                            <password>${ds.password}</password>
                        </configuration>

                        <executions>
                            <execution>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <!-- specific configuration for this execution -->
                                <configuration>
                                    <!-- specify your SQL commands, can be all of the following configurations -->
                                    <srcFiles>
                                        <srcFile>${project.build.testOutputDirectory}/create_admin_user.sql</srcFile>
                                        <srcFile>${project.build.testOutputDirectory}/create_translator_user.sql</srcFile>
                                    </srcFiles>
                                    <autocommit>true</autocommit>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <version>2.11</version>
                        <executions>
                            <execution>
                                <id>integration-test</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>verify</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <redirectTestOutputToFile>false</redirectTestOutputToFile>
                            <printSummary>true</printSummary>
                            <!--<forkMode>always</forkMode>-->
                            <argLine>-Dconcordion.output.dir=${concordion.output.dir}</argLine>
                            <includes>
                                <include>${include.test.patterns}</include>
                                <!--index page-->
                                <include>**/FeatureTest.java</include>
                            </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <build>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                    <include>**/*.sql</include>
                    <include>**/log4j.xml</include>
                    <include>**/zanata-ds.xml</include>
                    <include>**/zanata-autotest.ini</include>
                </includes>
            </testResource>
            <testResource>
                <directory>sample-projects</directory>
                <targetPath>${zanata.sample.projects.basedir}</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>**/zanata.xml</include>
                    <include>**/pom.xml</include>
                </includes>
            </testResource>
            <testResource>
                <directory>sample-projects</directory>
                <targetPath>${zanata.sample.projects.basedir}</targetPath>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/zanata.xml</exclude>
                    <exclude>**/pom.xml</exclude>
                </excludes>
            </testResource>
            <testResource>
                <directory>src/test/resources/concordion</directory>
                <filtering>false</filtering>
                <includes>
                    <include>**/*.*</include>
                </includes>
            </testResource>
        </testResources>
        <plugins>
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo>===== Properties that can be set for functional test =====</echo>
                                <echo>-Dfunctional-test : to activate functional test run</echo>
                                <echo>-Dcargo.wait : to ask cargo to start up then wait so that tests can be run manually</echo>
                                <echo>-Dzanata.target.version=version of zanata to deploy. Default is: ${project.parent.version}</echo>
                                <echo>-Dzanata.target.war=location of the war. Default is: ${basedir}/../zanata-war/target/zanata-${zanata.target.version}.war</echo>
                                <echo>-Dzanata.instance.url=http://${cargo.host}:8080/${context.path}</echo>
                                <echo>-Dzanata.apikey=b6d7044e9ee3b2447c28fb7c50d86d98</echo>
                                <!--<echo>-Dzanata.client.version=maven client version to use. Currently: ${zanata.client.version}</echo>-->
                                <echo>-Dzanata.sample.projects.basedir=${project.build.testOutputDirectory}/sample-projects</echo>
                                <echo>-Dcargo.debug.jvm.args : If not set by default will listen to port 8787. Need to set to empty on jenkins</echo>
                                <echo>-Dinclude.test.patterns : by default is **/*TestSuite.java. Can be used to control what test to run.</echo>
                                <echo>==========================================================</echo>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--we want to run tests in integration phase-->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                    <failIfNoTests>false</failIfNoTests>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
                <plugin>
                    <groupId>org.eclipse.m2e</groupId>
                    <artifactId>lifecycle-mapping</artifactId>
                    <version>1.0.0</version>
                    <configuration>
                        <lifecycleMappingMetadata>
                            <pluginExecutions>
                                <pluginExecution>
                                    <pluginExecutionFilter>
                                        <groupId>
                                            org.apache.maven.plugins
                                        </groupId>
                                        <artifactId>
                                            maven-antrun-plugin
                                        </artifactId>
                                        <versionRange>
                                            [1.7,)
                                        </versionRange>
                                        <goals>
                                            <goal>run</goal>
                                        </goals>
                                    </pluginExecutionFilter>
                                    <action>
                                        <ignore />
                                    </action>
                                </pluginExecution>
                            </pluginExecutions>
                        </lifecycleMappingMetadata>
                    </configuration>
                </plugin>

                <!--We don't want cobertura here-->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>cobertura-maven-plugin</artifactId>
                    <configuration>
                        <instrumentation>
                            <excludes>
                                <exclude>**/*</exclude>
                            </excludes>
                        </instrumentation>
                        <check>
                            <totalBranchRate>0</totalBranchRate>
                            <totalLineRate>0</totalLineRate>
                            <haltOnFailure>false</haltOnFailure>
                        </check>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
